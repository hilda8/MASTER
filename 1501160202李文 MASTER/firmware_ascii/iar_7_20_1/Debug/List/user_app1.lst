###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.1.14183/W32 for ARM       12/Nov/2018  14:56:23
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_common\application\user_app1.c
#    Command line =  
#        -f C:\Users\BAYE\AppData\Local\Temp\EW7D4C.tmp
#        (C:\Users\BAYE\Desktop\Razor_Atmel\firmware_common\application\user_app1.c
#        -D EIE1 --preprocess=c
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List
#        -lC
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List
#        -o
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\ -I
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\..\bsp\ -I
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\..\drivers\
#        -I
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\..\application\
#        -I
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\
#        -I
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\application\
#        -I
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\cmsis\
#        -I
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I
#        D:\IAR\arm\CMSIS\Include\)
#    Locale       =  C
#    List file    =  
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List\user_app1.lst
#    Object file  =  
#        C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\Obj\user_app1.o
#
###############################################################################

C:\Users\BAYE\Desktop\Razor_Atmel\firmware_common\application\user_app1.c
      1          /**********************************************************************************************************************
      2          File: user_app1.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app1 as a template:
      6           1. Copy both user_app1.c and user_app1.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app1" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp1" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP1" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app1.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserApp1Initialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserApp1RunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"

  /* Required constants for ANT channel configuration */
  ^
"C:\Users\BAYE\Desktop\Razor_Atmel\firmware_common\application\user_app1.h",30  Warning[Pe009]: 
          nested comment is not allowed
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_UserApp1"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserApp1Flags;                       /* Global state flags */
   \                     G_u32UserApp1Flags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          /* Existing variables */
     56          extern u32 G_u32AntApiCurrentMessageTimeStamp;                    
     57          extern AntApplicationMessageType G_eAntApiCurrentMessageClass;    
     58          extern u8 G_au8AntApiCurrentMessageBytes[ANT_APPLICATION_MESSAGE_BYTES];  
     59          extern AntExtendedDataType G_sAntApiCurrentMessageExtData;  
     60          
     61          /***********************************************************************************************************************
     62          Global variable definitions with scope limited to this local application.
     63          Variable names shall start with "UserApp1_" and be declared as static.
     64          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     65          static fnCode_type UserApp1_StateMachine;            /* The state machine function pointer */
   \                     UserApp1_StateMachine:
   \   00000000                      DS8 4
     66          

   \                                 In section .bss, align 4
     67          static u32 UserApp1_u32Timeout;                        /* Timeout counter used across states */
   \                     UserApp1_u32Timeout:
   \   00000000                      DS8 4
     68          

   \                                 In section .bss, align 4
     69          static AntAssignChannelInfoType UserApp1_sChannelInfo; /* ANT setup parameters */
   \                     UserApp1_sChannelInfo:
   \   00000000                      DS8 20
     70          

   \                                 In section .data, align 4
     71          static u8 UserApp1_au8MessageFail[] = "\n\r***ANT channel setup failed***\n\n\r";
   \                     UserApp1_au8MessageFail:
   \   00000000   0x0A 0x0D          DC8 "\012\015***ANT channel setup failed***\012\012\015"
   \              0x2A 0x2A    
   \              0x2A 0x41    
   \              0x4E 0x54    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x75 0x70    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x2A    
   \              0x2A 0x2A    
   \              0x0A 0x0A    
   \              0x0D 0x00    
     72          

   \                                 In section .data, align 4
     73          u8 au8DataContent[] = "xxxxxxxxxxxxxxxx";
   \                     au8DataContent:
   \   00000000   0x78 0x78          DC8 "xxxxxxxxxxxxxxxx"
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     74          

   \                                 In section .data, align 4
     75          u8 G_au8AntApiCurrentData[]="xxxxxxxxxxxxxxxx";
   \                     G_au8AntApiCurrentData:
   \   00000000   0x78 0x78          DC8 "xxxxxxxxxxxxxxxx"
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     76          /**********************************************************************************************************************
     77          Function Definitions
     78          **********************************************************************************************************************/
     79          
     80          /*--------------------------------------------------------------------------------------------------------------------*/
     81          /* Public functions                                                                                                   */
     82          /*--------------------------------------------------------------------------------------------------------------------*/
     83          
     84          /*--------------------------------------------------------------------------------------------------------------------*/
     85          /* Protected functions                                                                                                */
     86          /*--------------------------------------------------------------------------------------------------------------------*/
     87          
     88          /*--------------------------------------------------------------------------------------------------------------------
     89          Function: UserApp1Initialize
     90          
     91          Description:
     92          Initializes the State Machine and its variables.
     93          
     94          Requires:
     95            -
     96          
     97          Promises:
     98            - 
     99          */
    100          //void UserApp1Initialize(void)
    101          //{
    102          //
    103          //  /* If good initialization, set state to Idle */
    104          //  if( 1 )
    105          //  {
    106          //    UserApp1_StateMachine = UserApp1SM_Idle;
    107          //  }
    108          //  else
    109          //  {
    110          //    /* The task isn't properly initialized, so shut it down and don't run */
    111          //    UserApp1_StateMachine = UserApp1SM_Error;
    112          //  }
    113          //
    114          //} /* end UserApp1Initialize() */
    115          

   \                                 In section .text, align 2, keep-with-next
    116            void UserApp1Initialize(void)
    117          {
   \                     UserApp1Initialize: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    118            u8 au8WelcomeMessage[] = "ANT Master";
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x....             LDR.N    R1,??DataTable3
   \   00000006   0x220B             MOVS     R2,#+11
   \   00000008   0x.... 0x....      BL       __aeabi_memcpy
    119          
    120            /* Set a message up on the LCD. Delay is required to let the clear command send. */
    121            LCDCommand(LCD_CLEAR_CMD);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       LCDCommand
    122            for(u32 i = 0; i < 10000; i++);
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??UserApp1Initialize_0: (+1)
   \   00000014   0xF242 0x7110      MOVW     R1,#+10000
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xD201             BCS.N    ??UserApp1Initialize_1
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0xE7F9             B.N      ??UserApp1Initialize_0
    123            LCDMessage(LINE1_START_ADDR, au8WelcomeMessage);
   \                     ??UserApp1Initialize_1: (+1)
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       LCDMessage
    124          
    125           /* Configure ANT for this application */
    126            UserApp1_sChannelInfo.AntChannel          = ANT_CHANNEL_USERAPP;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR.N    R1,??DataTable3_1
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
    127            UserApp1_sChannelInfo.AntChannelType      = ANT_CHANNEL_TYPE_USERAPP;
   \   0000002E   0x2010             MOVS     R0,#+16
   \   00000030   0x....             LDR.N    R1,??DataTable3_1
   \   00000032   0x7048             STRB     R0,[R1, #+1]
    128            UserApp1_sChannelInfo.AntChannelPeriodLo  = ANT_CHANNEL_PERIOD_LO_USERAPP;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable3_1
   \   00000038   0x73C8             STRB     R0,[R1, #+15]
    129            UserApp1_sChannelInfo.AntChannelPeriodHi  = ANT_CHANNEL_PERIOD_HI_USERAPP;
   \   0000003A   0x2020             MOVS     R0,#+32
   \   0000003C   0x....             LDR.N    R1,??DataTable3_1
   \   0000003E   0x7408             STRB     R0,[R1, #+16]
    130           
    131            UserApp1_sChannelInfo.AntDeviceIdLo       = ANT_DEVICEID_LO_USERAPP;
   \   00000040   0x2035             MOVS     R0,#+53
   \   00000042   0x....             LDR.N    R1,??DataTable3_1
   \   00000044   0x72C8             STRB     R0,[R1, #+11]
    132            UserApp1_sChannelInfo.AntDeviceIdHi       = ANT_DEVICEID_HI_USERAPP;
   \   00000046   0x2012             MOVS     R0,#+18
   \   00000048   0x....             LDR.N    R1,??DataTable3_1
   \   0000004A   0x7308             STRB     R0,[R1, #+12]
    133            UserApp1_sChannelInfo.AntDeviceType       = ANT_DEVICE_TYPE_USERAPP;
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0x....             LDR.N    R1,??DataTable3_1
   \   00000050   0x7348             STRB     R0,[R1, #+13]
    134            UserApp1_sChannelInfo.AntTransmissionType = ANT_TRANSMISSION_TYPE_USERAPP;
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x....             LDR.N    R1,??DataTable3_1
   \   00000056   0x7388             STRB     R0,[R1, #+14]
    135            UserApp1_sChannelInfo.AntFrequency        = ANT_FREQUENCY_USERAPP;
   \   00000058   0x2032             MOVS     R0,#+50
   \   0000005A   0x....             LDR.N    R1,??DataTable3_1
   \   0000005C   0x7448             STRB     R0,[R1, #+17]
    136            UserApp1_sChannelInfo.AntTxPower          = ANT_TX_POWER_USERAPP;
   \   0000005E   0x2004             MOVS     R0,#+4
   \   00000060   0x....             LDR.N    R1,??DataTable3_1
   \   00000062   0x7488             STRB     R0,[R1, #+18]
    137          
    138            UserApp1_sChannelInfo.AntNetwork = ANT_NETWORK_DEFAULT;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x....             LDR.N    R1,??DataTable3_1
   \   00000068   0x7088             STRB     R0,[R1, #+2]
    139            for(u8 i = 0; i < ANT_NETWORK_NUMBER_BYTES; i++)
   \   0000006A   0x2000             MOVS     R0,#+0
   \                     ??UserApp1Initialize_2: (+1)
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x2808             CMP      R0,#+8
   \   00000070   0xDA06             BGE.N    ??UserApp1Initialize_3
    140            {
    141              UserApp1_sChannelInfo.AntNetworkKey[i] = ANT_DEFAULT_NETWORK_KEY;
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0x....             LDR.N    R2,??DataTable3_1
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x4402             ADD      R2,R2,R0
   \   0000007A   0x70D1             STRB     R1,[R2, #+3]
    142            }
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
   \   0000007E   0xE7F5             B.N      ??UserApp1Initialize_2
    143            
    144            /* Attempt to queue the ANT channel setup */
    145            if( AntAssignChannel(&UserApp1_sChannelInfo) )
   \                     ??UserApp1Initialize_3: (+1)
   \   00000080   0x....             LDR.N    R0,??DataTable3_1
   \   00000082   0x.... 0x....      BL       AntAssignChannel
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD008             BEQ.N    ??UserApp1Initialize_4
    146            {
    147              UserApp1_u32Timeout = G_u32SystemTime1ms;
   \   0000008A   0x....             LDR.N    R0,??DataTable3_2
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x....             LDR.N    R1,??DataTable3_3
   \   00000090   0x6008             STR      R0,[R1, #+0]
    148              UserApp1_StateMachine = UserApp1SM_AntChannelAssign;
   \   00000092   0x.... 0x....      ADR.W    R0,UserApp1SM_AntChannelAssign
   \   00000096   0x....             LDR.N    R1,??DataTable3_4
   \   00000098   0x6008             STR      R0,[R1, #+0]
   \   0000009A   0xE006             B.N      ??UserApp1Initialize_5
    149            }
    150            else
    151            {
    152              /* The task isn't properly initialized, so shut it down and don't run */
    153              DebugPrintf(UserApp1_au8MessageFail);
   \                     ??UserApp1Initialize_4: (+1)
   \   0000009C   0x....             LDR.N    R0,??DataTable3_5
   \   0000009E   0x.... 0x....      BL       DebugPrintf
    154              UserApp1_StateMachine = UserApp1SM_Error;
   \   000000A2   0x.... 0x....      ADR.W    R0,UserApp1SM_Error
   \   000000A6   0x....             LDR.N    R1,??DataTable3_4
   \   000000A8   0x6008             STR      R0,[R1, #+0]
    155            }
    156          
    157          } /* end UserApp1Initialize() */
   \                     ??UserApp1Initialize_5: (+1)
   \   000000AA   0xBD07             POP      {R0-R2,PC}       ;; return
    158          
    159          /*----------------------------------------------------------------------------------------------------------------------
    160          Function UserApp1RunActiveState()
    161          
    162          Description:
    163          Selects and runs one iteration of the current state in the state machine.
    164          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    165          may take 1ms / n to execute.
    166          
    167          Requires:
    168            - State machine function pointer points at current state
    169          
    170          Promises:
    171            - Calls the function to pointed by the state machine function pointer
    172          */

   \                                 In section .text, align 2, keep-with-next
    173          void UserApp1RunActiveState(void)
    174          {
   \                     UserApp1RunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    175            UserApp1_StateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable3_4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    176          
    177          } /* end UserApp1RunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    178          
    179          
    180          /*--------------------------------------------------------------------------------------------------------------------*/
    181          /* Private functions                                                                                                  */
    182          /*--------------------------------------------------------------------------------------------------------------------*/
    183          
    184          
    185          /**********************************************************************************************************************
    186          State Machine Function Definitions
    187          **********************************************************************************************************************/
    188          /* Wait for ANT channel assignment */

   \                                 In section .text, align 4, keep-with-next
    189          static void UserApp1SM_AntChannelAssign()
    190          {
   \                     UserApp1SM_AntChannelAssign: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    191            if( AntRadioStatusChannel(ANT_CHANNEL_USERAPP) == ANT_CONFIGURED)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       AntRadioStatusChannel
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD106             BNE.N    ??UserApp1SM_AntChannelAssign_0
    192            {
    193              /* Channel assignment is successful, so open channel and
    194              proceed to Idle state */
    195              AntOpenChannelNumber(ANT_CHANNEL_USERAPP);
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       AntOpenChannelNumber
    196              UserApp1_StateMachine = UserApp1SM_Idle;
   \   00000012   0x.... 0x....      ADR.W    R0,UserApp1SM_Idle
   \   00000016   0x....             LDR.N    R1,??DataTable3_4
   \   00000018   0x6008             STR      R0,[R1, #+0]
    197            }
    198            
    199            /* Watch for time out */
    200            if(IsTimeUp(&UserApp1_u32Timeout, 3000))
   \                     ??UserApp1SM_AntChannelAssign_0: (+1)
   \   0000001A   0xF640 0x31B8      MOVW     R1,#+3000
   \   0000001E   0x....             LDR.N    R0,??DataTable3_3
   \   00000020   0x.... 0x....      BL       IsTimeUp
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD006             BEQ.N    ??UserApp1SM_AntChannelAssign_1
    201            {
    202              DebugPrintf(UserApp1_au8MessageFail);
   \   00000028   0x....             LDR.N    R0,??DataTable3_5
   \   0000002A   0x.... 0x....      BL       DebugPrintf
    203              UserApp1_StateMachine = UserApp1SM_Error;    
   \   0000002E   0x.... 0x....      ADR.W    R0,UserApp1SM_Error
   \   00000032   0x....             LDR.N    R1,??DataTable3_4
   \   00000034   0x6008             STR      R0,[R1, #+0]
    204            }
    205               
    206               
    207          } /* end UserApp1SM_AntChannelAssign */
   \                     ??UserApp1SM_AntChannelAssign_1: (+1)
   \   00000036   0xBD01             POP      {R0,PC}          ;; return
    208          
    209          /*-------------------------------------------------------------------------------------------------------------------*/
    210          /* Wait for ??? */

   \                                 In section .text, align 4, keep-with-next
    211          static void UserApp1SM_Idle(void)
    212          {
   \                     UserApp1SM_Idle: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    213            static u8 au8TestMessage[] = {0x5B, 0, 0, 0, 0xFF, 0, 0, 0};
    214                 /* New message from ANT task: check what it is */
    215            if(AntReadAppMessageBuffer()){
   \   00000002   0x.... 0x....      BL       AntReadAppMessageBuffer
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD065             BEQ.N    ??UserApp1SM_Idle_0
    216             if(G_eAntApiCurrentMessageClass == ANT_DATA)
   \   0000000A   0x....             LDR.N    R0,??DataTable3_6
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD127             BNE.N    ??UserApp1SM_Idle_1
    217             {
    218                 for(u8 i = 0; i < ANT_DATA_BYTES; i++)
   \   00000012   0x2400             MOVS     R4,#+0
   \                     ??UserApp1SM_Idle_2: (+1)
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x2C08             CMP      R4,#+8
   \   00000018   0xDA1E             BGE.N    ??UserApp1SM_Idle_3
    219                {
    220                    au8DataContent[2 * i]     = HexToASCIICharUpper(G_au8AntApiCurrentData[i] / 16);
   \   0000001A   0x....             LDR.N    R0,??DataTable3_7
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x5D00             LDRB     R0,[R0, R4]
   \   00000020   0x2110             MOVS     R1,#+16
   \   00000022   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       HexToASCIICharUpper
   \   0000002C   0x....             LDR.N    R1,??DataTable3_8
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0xF801 0x0014      STRB     R0,[R1, R4, LSL #+1]
    221                    au8DataContent[2 * i + 1] = HexToASCIICharUpper(G_au8AntApiCurrentData[i] % 16);
   \   00000034   0x....             LDR.N    R0,??DataTable3_7
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0x5D00             LDRB     R0,[R0, R4]
   \   0000003A   0x2110             MOVS     R1,#+16
   \   0000003C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000040   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x.... 0x....      BL       HexToASCIICharUpper
   \   0000004A   0x....             LDR.N    R1,??DataTable3_8
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0xEB01 0x0144      ADD      R1,R1,R4, LSL #+1
   \   00000052   0x7048             STRB     R0,[R1, #+1]
    222               }
   \   00000054   0x1C64             ADDS     R4,R4,#+1
   \   00000056   0xE7DD             B.N      ??UserApp1SM_Idle_2
    223               
    224               LCDMessage(LINE2_START_ADDR, au8DataContent); 
   \                     ??UserApp1SM_Idle_3: (+1)
   \   00000058   0x....             LDR.N    R1,??DataTable3_8
   \   0000005A   0x2040             MOVS     R0,#+64
   \   0000005C   0x.... 0x....      BL       LCDMessage
   \   00000060   0xE039             B.N      ??UserApp1SM_Idle_0
    225               
    226             }
    227          
    228              else if(G_eAntApiCurrentMessageClass == ANT_TICK)
   \                     ??UserApp1SM_Idle_1: (+1)
   \   00000062   0x....             LDR.N    R0,??DataTable3_6
   \   00000064   0x7800             LDRB     R0,[R0, #+0]
   \   00000066   0x2802             CMP      R0,#+2
   \   00000068   0xD135             BNE.N    ??UserApp1SM_Idle_0
    229              {
    230                if(G_au8AntApiCurrentMessageBytes[ANT_TICK_MSG_EVENT_CODE_INDEX] == EVENT_TRANSFER_TX_FAILED )
   \   0000006A   0x....             LDR.N    R0,??DataTable3_9
   \   0000006C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000006E   0x2806             CMP      R0,#+6
   \   00000070   0xD116             BNE.N    ??UserApp1SM_Idle_4
    231                {
    232                  au8TestMessage[3]++;
   \   00000072   0x....             LDR.N    R0,??DataTable3_10
   \   00000074   0x78C0             LDRB     R0,[R0, #+3]
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0x....             LDR.N    R1,??DataTable3_10
   \   0000007A   0x70C8             STRB     R0,[R1, #+3]
    233                  if(au8TestMessage[3] == 0)
   \   0000007C   0x....             LDR.N    R0,??DataTable3_10
   \   0000007E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD10D             BNE.N    ??UserApp1SM_Idle_4
    234                  {
    235                    au8TestMessage[2]++;
   \   00000084   0x....             LDR.N    R0,??DataTable3_10
   \   00000086   0x7880             LDRB     R0,[R0, #+2]
   \   00000088   0x1C40             ADDS     R0,R0,#+1
   \   0000008A   0x....             LDR.N    R1,??DataTable3_10
   \   0000008C   0x7088             STRB     R0,[R1, #+2]
    236                    if(au8TestMessage[2] == 0)
   \   0000008E   0x....             LDR.N    R0,??DataTable3_10
   \   00000090   0x7880             LDRB     R0,[R0, #+2]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD104             BNE.N    ??UserApp1SM_Idle_4
    237                    {
    238                      au8TestMessage[1]++;
   \   00000096   0x....             LDR.N    R0,??DataTable3_10
   \   00000098   0x7840             LDRB     R0,[R0, #+1]
   \   0000009A   0x1C40             ADDS     R0,R0,#+1
   \   0000009C   0x....             LDR.N    R1,??DataTable3_10
   \   0000009E   0x7048             STRB     R0,[R1, #+1]
    239                    }
    240                  }
    241                } 
    242                
    243               /* Update and queue the new message data */
    244                au8TestMessage[7]++;
   \                     ??UserApp1SM_Idle_4: (+1)
   \   000000A0   0x....             LDR.N    R0,??DataTable3_10
   \   000000A2   0x79C0             LDRB     R0,[R0, #+7]
   \   000000A4   0x1C40             ADDS     R0,R0,#+1
   \   000000A6   0x....             LDR.N    R1,??DataTable3_10
   \   000000A8   0x71C8             STRB     R0,[R1, #+7]
    245                if(au8TestMessage[7] == 0)
   \   000000AA   0x....             LDR.N    R0,??DataTable3_10
   \   000000AC   0x79C0             LDRB     R0,[R0, #+7]
   \   000000AE   0x2800             CMP      R0,#+0
   \   000000B0   0xD10D             BNE.N    ??UserApp1SM_Idle_5
    246                {
    247                  au8TestMessage[6]++;
   \   000000B2   0x....             LDR.N    R0,??DataTable3_10
   \   000000B4   0x7980             LDRB     R0,[R0, #+6]
   \   000000B6   0x1C40             ADDS     R0,R0,#+1
   \   000000B8   0x....             LDR.N    R1,??DataTable3_10
   \   000000BA   0x7188             STRB     R0,[R1, #+6]
    248                  if(au8TestMessage[6] == 0)
   \   000000BC   0x....             LDR.N    R0,??DataTable3_10
   \   000000BE   0x7980             LDRB     R0,[R0, #+6]
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD104             BNE.N    ??UserApp1SM_Idle_5
    249                  {
    250                    au8TestMessage[5]++;
   \   000000C4   0x....             LDR.N    R0,??DataTable3_10
   \   000000C6   0x7940             LDRB     R0,[R0, #+5]
   \   000000C8   0x1C40             ADDS     R0,R0,#+1
   \   000000CA   0x....             LDR.N    R1,??DataTable3_10
   \   000000CC   0x7148             STRB     R0,[R1, #+5]
    251                  }
    252                }
    253                AntQueueAcknowledgedMessage(ANT_CHANNEL_USERAPP, au8TestMessage);
   \                     ??UserApp1SM_Idle_5: (+1)
   \   000000CE   0x....             LDR.N    R1,??DataTable3_10
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x.... 0x....      BL       AntQueueAcknowledgedMessage
    254              }
    255           
    256            }
    257          
    258          } /* end UserApp1SM_Idle() */
   \                     ??UserApp1SM_Idle_0: (+1)
   \   000000D6   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .data, align 4
   \                     `UserApp1SM_Idle::au8TestMessage`:
   \   00000000   0x5B 0x00          DC8 91, 0, 0, 0, 255, 0, 0, 0
   \              0x00 0x00    
   \              0xFF 0x00    
   \              0x00 0x00    
    259          
    260              
    261          
    262          /*-------------------------------------------------------------------------------------------------------------------*/
    263          /* Handle an error */

   \                                 In section .text, align 4, keep-with-next
    264          static void UserApp1SM_Error(void) 
    265          {
    266            
    267          } /* end UserApp1SM_Error() */
   \                     UserApp1SM_Error: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     UserApp1_sChannelInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     UserApp1_u32Timeout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     UserApp1_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     UserApp1_au8MessageFail

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     G_eAntApiCurrentMessageClass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     G_au8AntApiCurrentData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     au8DataContent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     G_au8AntApiCurrentMessageBytes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     `UserApp1SM_Idle::au8TestMessage`

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x41 0x4E          DC8 "ANT Master"
   \              0x54 0x20    
   \              0x4D 0x61    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x00         
   \   0000000B   0x00               DC8 0
    268            
    269          
    270          static u8 au8TestMessage[] = {0, 0, 0, 0, 0xA5, 0, 0, 0};
                           ^
Warning[Pe177]: variable "au8TestMessage" was declared but never referenced
Warning[Ms014]: some characters could not be correctly encoded in
          "C:\Users\BAYE\Desktop\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\L
          ist\user_app1.i", and have been replaced with '@'. The first such
          character has unicode code point 0x7760 ("@")
    271          
    272          
    273          /*--------------------------------------------------------------------------------------------------------------------*/
    274          /* End of File                                                                                                        */
    275          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   UserApp1Initialize
        16   -> AntAssignChannel
        16   -> DebugPrintf
        16   -> LCDCommand
        16   -> LCDMessage
        16   -> __aeabi_memcpy
       8   UserApp1RunActiveState
         8   -- Indirect call
       8   UserApp1SM_AntChannelAssign
         8   -> AntOpenChannelNumber
         8   -> AntRadioStatusChannel
         8   -> DebugPrintf
         8   -> IsTimeUp
       0   UserApp1SM_Error
       8   UserApp1SM_Idle
         8   -> AntQueueAcknowledgedMessage
         8   -> AntReadAppMessageBuffer
         8   -> HexToASCIICharUpper
         8   -> LCDMessage


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      12  ?_0
      20  G_au8AntApiCurrentData
       4  G_u32UserApp1Flags
     172  UserApp1Initialize
      10  UserApp1RunActiveState
      56  UserApp1SM_AntChannelAssign
       2  UserApp1SM_Error
     216  UserApp1SM_Idle
       4  UserApp1_StateMachine
      36  UserApp1_au8MessageFail
      20  UserApp1_sChannelInfo
       4  UserApp1_u32Timeout
      20  au8DataContent
       8  au8TestMessage

 
  32 bytes in section .bss
  84 bytes in section .data
  12 bytes in section .rodata
 500 bytes in section .text
 
 500 bytes of CODE  memory
  12 bytes of CONST memory
 116 bytes of DATA  memory

Errors: none
Warnings: 3
